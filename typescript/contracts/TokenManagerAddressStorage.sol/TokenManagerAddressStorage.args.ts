/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - dist/TokenManagerAddressStorage.sol/TokenManagerAddressStorage.sol/TokenManagerAddressStorage.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./TokenManagerAddressStorage.abi";

export type TokenManagerAddressStorageCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerAddressStorage.callContractWithInterchainToken function args
 */
export const encodeTokenManagerAddressStorageCallContractWithInterchainTokenArgs =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerAddressStorageCallContractWithInterchainTokenArgs) =>
    [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerAddressStorage.callContractWithInterchainToken function data
 */
export const encodeTokenManagerAddressStorageCallContractWithInterchainTokenData =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerAddressStorageCallContractWithInterchainTokenArgs) =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [destinationChain, destinationAddress, amount, data],
    });

export type TokenManagerAddressStorageGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerAddressStorage.giveToken function args
 */
export const encodeTokenManagerAddressStorageGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerAddressStorageGiveTokenArgs) =>
  [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerAddressStorage.giveToken function data
 */
export const encodeTokenManagerAddressStorageGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerAddressStorageGiveTokenArgs) =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerAddressStorageSendTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerAddressStorage.sendToken function args
 */
export const encodeTokenManagerAddressStorageSendTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerAddressStorageSendTokenArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerAddressStorage.sendToken function data
 */
export const encodeTokenManagerAddressStorageSendTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerAddressStorageSendTokenArgs) =>
  encodeFunctionData({
    functionName: "sendToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerAddressStorageSetFlowLimitArgs = { flowLimit: bigint };

/**
 * Factory function for TokenManagerAddressStorage.setFlowLimit function args
 */
export const encodeTokenManagerAddressStorageSetFlowLimitArgs = ({
  flowLimit,
}: TokenManagerAddressStorageSetFlowLimitArgs) => [flowLimit] as const;

/**
 * Encoder function for TokenManagerAddressStorage.setFlowLimit function data
 */
export const encodeTokenManagerAddressStorageSetFlowLimitData = ({
  flowLimit,
}: TokenManagerAddressStorageSetFlowLimitArgs) =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit],
  });

export type TokenManagerAddressStorageSetOperatorArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for TokenManagerAddressStorage.setOperator function args
 */
export const encodeTokenManagerAddressStorageSetOperatorArgs = ({
  operator_,
}: TokenManagerAddressStorageSetOperatorArgs) => [operator_] as const;

/**
 * Encoder function for TokenManagerAddressStorage.setOperator function data
 */
export const encodeTokenManagerAddressStorageSetOperatorData = ({
  operator_,
}: TokenManagerAddressStorageSetOperatorArgs) =>
  encodeFunctionData({
    functionName: "setOperator",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type TokenManagerAddressStorageSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerAddressStorage.setup function args
 */
export const encodeTokenManagerAddressStorageSetupArgs = ({
  params,
}: TokenManagerAddressStorageSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerAddressStorage.setup function data
 */
export const encodeTokenManagerAddressStorageSetupData = ({
  params,
}: TokenManagerAddressStorageSetupArgs) =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerAddressStorageTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerAddressStorage.transmitInterchainTransfer function args
 */
export const encodeTokenManagerAddressStorageTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerAddressStorageTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerAddressStorage.transmitInterchainTransfer function data
 */
export const encodeTokenManagerAddressStorageTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerAddressStorageTransmitInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });
