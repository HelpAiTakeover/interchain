/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - dist/TokenManagerMintBurn.sol/TokenManagerMintBurn.sol/TokenManagerMintBurn.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./TokenManagerMintBurn.abi";

export type TokenManagerMintBurnCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.callContractWithInterchainToken function args
 */
export const encodeTokenManagerMintBurnCallContractWithInterchainTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: TokenManagerMintBurnCallContractWithInterchainTokenArgs) =>
  [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerMintBurn.callContractWithInterchainToken function data
 */
export const encodeTokenManagerMintBurnCallContractWithInterchainTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  data,
}: TokenManagerMintBurnCallContractWithInterchainTokenArgs) =>
  encodeFunctionData({
    functionName: "callContractWithInterchainToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, data],
  });

export type TokenManagerMintBurnGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerMintBurn.giveToken function args
 */
export const encodeTokenManagerMintBurnGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerMintBurnGiveTokenArgs) => [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerMintBurn.giveToken function data
 */
export const encodeTokenManagerMintBurnGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerMintBurnGiveTokenArgs) =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerMintBurnSendTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.sendToken function args
 */
export const encodeTokenManagerMintBurnSendTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnSendTokenArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerMintBurn.sendToken function data
 */
export const encodeTokenManagerMintBurnSendTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnSendTokenArgs) =>
  encodeFunctionData({
    functionName: "sendToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerMintBurnSetFlowLimitArgs = { flowLimit: bigint };

/**
 * Factory function for TokenManagerMintBurn.setFlowLimit function args
 */
export const encodeTokenManagerMintBurnSetFlowLimitArgs = ({
  flowLimit,
}: TokenManagerMintBurnSetFlowLimitArgs) => [flowLimit] as const;

/**
 * Encoder function for TokenManagerMintBurn.setFlowLimit function data
 */
export const encodeTokenManagerMintBurnSetFlowLimitData = ({
  flowLimit,
}: TokenManagerMintBurnSetFlowLimitArgs) =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit],
  });

export type TokenManagerMintBurnSetOperatorArgs = { operator_: `0x${string}` };

/**
 * Factory function for TokenManagerMintBurn.setOperator function args
 */
export const encodeTokenManagerMintBurnSetOperatorArgs = ({
  operator_,
}: TokenManagerMintBurnSetOperatorArgs) => [operator_] as const;

/**
 * Encoder function for TokenManagerMintBurn.setOperator function data
 */
export const encodeTokenManagerMintBurnSetOperatorData = ({
  operator_,
}: TokenManagerMintBurnSetOperatorArgs) =>
  encodeFunctionData({
    functionName: "setOperator",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type TokenManagerMintBurnSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerMintBurn.setup function args
 */
export const encodeTokenManagerMintBurnSetupArgs = ({
  params,
}: TokenManagerMintBurnSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerMintBurn.setup function data
 */
export const encodeTokenManagerMintBurnSetupData = ({
  params,
}: TokenManagerMintBurnSetupArgs) =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerMintBurnTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerMintBurn.transmitInterchainTransfer function args
 */
export const encodeTokenManagerMintBurnTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerMintBurn.transmitInterchainTransfer function data
 */
export const encodeTokenManagerMintBurnTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerMintBurnTransmitInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });
