/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - dist/TokenManagerLockUnlock.sol/TokenManagerLockUnlock.sol/TokenManagerLockUnlock.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./TokenManagerLockUnlock.abi";

export type TokenManagerLockUnlockCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.callContractWithInterchainToken function args
 */
export const encodeTokenManagerLockUnlockCallContractWithInterchainTokenArgs =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLockUnlockCallContractWithInterchainTokenArgs) =>
    [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerLockUnlock.callContractWithInterchainToken function data
 */
export const encodeTokenManagerLockUnlockCallContractWithInterchainTokenData =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLockUnlockCallContractWithInterchainTokenArgs) =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [destinationChain, destinationAddress, amount, data],
    });

export type TokenManagerLockUnlockGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLockUnlock.giveToken function args
 */
export const encodeTokenManagerLockUnlockGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerLockUnlockGiveTokenArgs) =>
  [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerLockUnlock.giveToken function data
 */
export const encodeTokenManagerLockUnlockGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerLockUnlockGiveTokenArgs) =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerLockUnlockSendTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.sendToken function args
 */
export const encodeTokenManagerLockUnlockSendTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockSendTokenArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLockUnlock.sendToken function data
 */
export const encodeTokenManagerLockUnlockSendTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockSendTokenArgs) =>
  encodeFunctionData({
    functionName: "sendToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerLockUnlockSetFlowLimitArgs = { flowLimit: bigint };

/**
 * Factory function for TokenManagerLockUnlock.setFlowLimit function args
 */
export const encodeTokenManagerLockUnlockSetFlowLimitArgs = ({
  flowLimit,
}: TokenManagerLockUnlockSetFlowLimitArgs) => [flowLimit] as const;

/**
 * Encoder function for TokenManagerLockUnlock.setFlowLimit function data
 */
export const encodeTokenManagerLockUnlockSetFlowLimitData = ({
  flowLimit,
}: TokenManagerLockUnlockSetFlowLimitArgs) =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit],
  });

export type TokenManagerLockUnlockSetOperatorArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.setOperator function args
 */
export const encodeTokenManagerLockUnlockSetOperatorArgs = ({
  operator_,
}: TokenManagerLockUnlockSetOperatorArgs) => [operator_] as const;

/**
 * Encoder function for TokenManagerLockUnlock.setOperator function data
 */
export const encodeTokenManagerLockUnlockSetOperatorData = ({
  operator_,
}: TokenManagerLockUnlockSetOperatorArgs) =>
  encodeFunctionData({
    functionName: "setOperator",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type TokenManagerLockUnlockSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerLockUnlock.setup function args
 */
export const encodeTokenManagerLockUnlockSetupArgs = ({
  params,
}: TokenManagerLockUnlockSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerLockUnlock.setup function data
 */
export const encodeTokenManagerLockUnlockSetupData = ({
  params,
}: TokenManagerLockUnlockSetupArgs) =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerLockUnlockTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLockUnlock.transmitInterchainTransfer function args
 */
export const encodeTokenManagerLockUnlockTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLockUnlock.transmitInterchainTransfer function data
 */
export const encodeTokenManagerLockUnlockTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLockUnlockTransmitInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });
