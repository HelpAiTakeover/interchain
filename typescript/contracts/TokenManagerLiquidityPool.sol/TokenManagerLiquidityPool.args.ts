/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * This file was generated by scripts/codegen.ts
 *
 * Original abi file:
 * - dist/TokenManagerLiquidityPool.sol/TokenManagerLiquidityPool.sol/TokenManagerLiquidityPool.json
 *
 * DO NOT EDIT MANUALLY
 */

import { encodeFunctionData } from "viem";

import ABI_FILE from "./TokenManagerLiquidityPool.abi";

export type TokenManagerLiquidityPoolCallContractWithInterchainTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  data: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.callContractWithInterchainToken function args
 */
export const encodeTokenManagerLiquidityPoolCallContractWithInterchainTokenArgs =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLiquidityPoolCallContractWithInterchainTokenArgs) =>
    [destinationChain, destinationAddress, amount, data] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.callContractWithInterchainToken function data
 */
export const encodeTokenManagerLiquidityPoolCallContractWithInterchainTokenData =
  ({
    destinationChain,
    destinationAddress,
    amount,
    data,
  }: TokenManagerLiquidityPoolCallContractWithInterchainTokenArgs) =>
    encodeFunctionData({
      functionName: "callContractWithInterchainToken",
      abi: ABI_FILE.abi,
      args: [destinationChain, destinationAddress, amount, data],
    });

export type TokenManagerLiquidityPoolGiveTokenArgs = {
  destinationAddress: `0x${string}`;
  amount: bigint;
};

/**
 * Factory function for TokenManagerLiquidityPool.giveToken function args
 */
export const encodeTokenManagerLiquidityPoolGiveTokenArgs = ({
  destinationAddress,
  amount,
}: TokenManagerLiquidityPoolGiveTokenArgs) =>
  [destinationAddress, amount] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.giveToken function data
 */
export const encodeTokenManagerLiquidityPoolGiveTokenData = ({
  destinationAddress,
  amount,
}: TokenManagerLiquidityPoolGiveTokenArgs) =>
  encodeFunctionData({
    functionName: "giveToken",
    abi: ABI_FILE.abi,
    args: [destinationAddress, amount],
  });

export type TokenManagerLiquidityPoolSendTokenArgs = {
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.sendToken function args
 */
export const encodeTokenManagerLiquidityPoolSendTokenArgs = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolSendTokenArgs) =>
  [destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.sendToken function data
 */
export const encodeTokenManagerLiquidityPoolSendTokenData = ({
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolSendTokenArgs) =>
  encodeFunctionData({
    functionName: "sendToken",
    abi: ABI_FILE.abi,
    args: [destinationChain, destinationAddress, amount, metadata],
  });

export type TokenManagerLiquidityPoolSetFlowLimitArgs = { flowLimit: bigint };

/**
 * Factory function for TokenManagerLiquidityPool.setFlowLimit function args
 */
export const encodeTokenManagerLiquidityPoolSetFlowLimitArgs = ({
  flowLimit,
}: TokenManagerLiquidityPoolSetFlowLimitArgs) => [flowLimit] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.setFlowLimit function data
 */
export const encodeTokenManagerLiquidityPoolSetFlowLimitData = ({
  flowLimit,
}: TokenManagerLiquidityPoolSetFlowLimitArgs) =>
  encodeFunctionData({
    functionName: "setFlowLimit",
    abi: ABI_FILE.abi,
    args: [flowLimit],
  });

export type TokenManagerLiquidityPoolSetLiquidityPoolArgs = {
  newLiquidityPool: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.setLiquidityPool function args
 */
export const encodeTokenManagerLiquidityPoolSetLiquidityPoolArgs = ({
  newLiquidityPool,
}: TokenManagerLiquidityPoolSetLiquidityPoolArgs) =>
  [newLiquidityPool] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.setLiquidityPool function data
 */
export const encodeTokenManagerLiquidityPoolSetLiquidityPoolData = ({
  newLiquidityPool,
}: TokenManagerLiquidityPoolSetLiquidityPoolArgs) =>
  encodeFunctionData({
    functionName: "setLiquidityPool",
    abi: ABI_FILE.abi,
    args: [newLiquidityPool],
  });

export type TokenManagerLiquidityPoolSetOperatorArgs = {
  operator_: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.setOperator function args
 */
export const encodeTokenManagerLiquidityPoolSetOperatorArgs = ({
  operator_,
}: TokenManagerLiquidityPoolSetOperatorArgs) => [operator_] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.setOperator function data
 */
export const encodeTokenManagerLiquidityPoolSetOperatorData = ({
  operator_,
}: TokenManagerLiquidityPoolSetOperatorArgs) =>
  encodeFunctionData({
    functionName: "setOperator",
    abi: ABI_FILE.abi,
    args: [operator_],
  });

export type TokenManagerLiquidityPoolSetupArgs = { params: `0x${string}` };

/**
 * Factory function for TokenManagerLiquidityPool.setup function args
 */
export const encodeTokenManagerLiquidityPoolSetupArgs = ({
  params,
}: TokenManagerLiquidityPoolSetupArgs) => [params] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.setup function data
 */
export const encodeTokenManagerLiquidityPoolSetupData = ({
  params,
}: TokenManagerLiquidityPoolSetupArgs) =>
  encodeFunctionData({
    functionName: "setup",
    abi: ABI_FILE.abi,
    args: [params],
  });

export type TokenManagerLiquidityPoolTransmitInterchainTransferArgs = {
  sender: `0x${string}`;
  destinationChain: string;
  destinationAddress: `0x${string}`;
  amount: bigint;
  metadata: `0x${string}`;
};

/**
 * Factory function for TokenManagerLiquidityPool.transmitInterchainTransfer function args
 */
export const encodeTokenManagerLiquidityPoolTransmitInterchainTransferArgs = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolTransmitInterchainTransferArgs) =>
  [sender, destinationChain, destinationAddress, amount, metadata] as const;

/**
 * Encoder function for TokenManagerLiquidityPool.transmitInterchainTransfer function data
 */
export const encodeTokenManagerLiquidityPoolTransmitInterchainTransferData = ({
  sender,
  destinationChain,
  destinationAddress,
  amount,
  metadata,
}: TokenManagerLiquidityPoolTransmitInterchainTransferArgs) =>
  encodeFunctionData({
    functionName: "transmitInterchainTransfer",
    abi: ABI_FILE.abi,
    args: [sender, destinationChain, destinationAddress, amount, metadata],
  });
